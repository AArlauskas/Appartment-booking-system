// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sourcery.Booking.WebAPI;

namespace Sourcery.Booking.WebAPI.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20200603123944_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sourcery.Booking.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "651 S Wells St, Chicago, IL 60607",
                            Name = "Room-#651-blue"
                        },
                        new
                        {
                            Id = 2,
                            Description = "678 N Orleans St, Chicago, IL 60654",
                            Name = "Appartment-#678"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dell Laptop"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#00BFFF",
                            Description = "Near window",
                            Name = "Bed 1",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 5,
                            Color = "#00BFFF",
                            Name = "Bed 2",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 6,
                            Color = "#07ed1d",
                            Description = "Single bed",
                            Name = "Room Green",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Color = "#c33752",
                            Description = "Single bed",
                            Name = "Red Room",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 8,
                            Color = "#B0BF1A",
                            Description = "Intel I7-10810U, 16GB, 2133 MHz, LPDDR3",
                            Name = "Latitude 9510",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 9,
                            Color = "#3c9f95",
                            Description = "Intel® Core™ Processor i7-9850H, 32GB,2x16GB, 2666MHz DDR4",
                            Name = "Precision 5540",
                            ParentId = 3
                        });
                });

            modelBuilder.Entity("Sourcery.Booking.Models.CategoryTag", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CategoryTags");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            TagId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            TagId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            TagId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            TagId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("Sourcery.Booking.Models.SchedulerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SchedulerEvent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            End = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Start = new DateTime(2020, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "John Wick"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            End = new DateTime(2020, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Start = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Trump"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 6,
                            End = new DateTime(2020, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Start = new DateTime(2020, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arnold Schwarzenegger"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            End = new DateTime(2020, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Start = new DateTime(2020, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Jonas Kazlauskas"
                        });
                });

            modelBuilder.Entity("Sourcery.Booking.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Appartments"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "2 beds"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dell"
                        });
                });

            modelBuilder.Entity("Sourcery.Booking.Models.Category", b =>
                {
                    b.HasOne("Sourcery.Booking.Models.Category", "ParentCategory")
                        .WithMany("Categories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sourcery.Booking.Models.CategoryTag", b =>
                {
                    b.HasOne("Sourcery.Booking.Models.Category", "Category")
                        .WithMany("CategoryTags")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sourcery.Booking.Models.Tag", "Tag")
                        .WithMany("CategoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sourcery.Booking.Models.SchedulerEvent", b =>
                {
                    b.HasOne("Sourcery.Booking.Models.Category", "Category")
                        .WithMany("SchedulerEvents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
